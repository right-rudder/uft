---
const { content } = Astro.props;

const info = content.info;

const quiz = content.quiz;

const FORM_WEBHOOK_URL = info.form_url;

const REDIRECT_URL = content.redirect_url;

const PORTAL_API_KEY = import.meta.env.PORTAL_API_KEY;
---

<section class="relative isolate bg-white">
  <div class="mx-auto grid max-w-7xl grid-cols-1 lg:grid-cols-2">
    <div class="relative px-6 pb-20 pt-24 sm:pt-32 lg:static lg:px-8 lg:py-48">
      <div class="mx-auto max-w-xl lg:mx-0 lg:max-w-lg">
        <h2 class="text-5xl font-bold tracking-tight text-gray-900">
          {info.form_h}
        </h2>
        <p class="mt-12 text-lg leading-8 text-gray-600">
          {info.form_p1}
        </p>
        <p class="mt-2 text-lg leading-8 text-gray-600">
          {info.form_p2}
        </p>
        <dl
          class="mt-10 space-y-4 text-base leading-7 text-gray-600 font-sans2"
        >
          <div class="flex gap-x-4">
            <dt class="flex-none">
              <span class="sr-only">Address</span>
              <svg
                class="h-7 w-6 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008z"
                ></path>
              </svg>
            </dt>
            <a class="hover:text-gray-900" href={info.gmaps} target="_blank">
              <dd>{info.address_1}<br />{info.address_2}</dd>
            </a>
          </div>
          <div class="flex gap-x-4">
            <dt class="flex-none">
              <span class="sr-only">Telephone</span>
              <svg
                class="h-7 w-6 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 01-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 00-1.091-.852H4.5A2.25 2.25 0 002.25 4.5v2.25z"
                ></path>
              </svg>
            </dt>
            <dd>
              <a class="hover:text-gray-900" href={`tel:${info.phone_num}`}
                >{info.phone_num}</a
              >
            </dd>
          </div>
          <div class="flex gap-x-4">
            <dt class="flex-none">
              <span class="sr-only">Email</span>
              <svg
                class="h-7 w-6 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75"
                ></path>
              </svg>
            </dt>
            <dd>
              <a class="hover:text-gray-900" href={`mailto:${info.email}`}
                >{info.email}</a
              >
            </dd>
          </div>
        </dl>
      </div>
    </div>
    <div
      class="bg-primary-500/30 mx-auto w-full h-full flex flex-col justify-center align-middle items-center p-6"
    >
      <form id="contact-form" class="w-full max-w-xl font-sans2">
        <div class="">
          <div class="mb-4">
            <label for="first-name" class="block mb-0 font-semibold">
              First Name
            </label>
            <input
              type="text"
              id="first-name"
              name="first-name"
              autocomplete="given-name"
              class="w-full h-9 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
              required
            />
          </div>
          <div class="mb-4">
            <label for="last-name" class="block mb-0 font-semibold">
              Last Name
            </label>
            <input
              type="text"
              id="last-name"
              name="last-name"
              autocomplete="family-name"
              class="w-full h-9 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
              required
            />
          </div>
          <div class="mb-4">
            <label for="phone" class="block mb-0 font-semibold"> Phone </label>
            <input
              type="text"
              id="phone"
              name="phone"
              autocomplete="tel"
              class="w-full h-9 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
              required
            />
          </div>
          <div class="mb-4">
            <label for="email" class="block mb-0 font-semibold"> Email </label>
            <input
              type="email"
              id="email"
              name="email"
              autocomplete="email"
              class="w-full h-9 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
              required
            />
          </div>
          <div class="mb-4">
            {
              info.extra_info &&
                info.extra_info.map((info) => (
                  <>
                    <label for={info.id} class="block mb-0 font-semibold">
                      {info.label}
                    </label>
                    <input
                      required
                      id={info.id}
                      name={info.id}
                      type="text"
                      class="w-full h-9 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
                    />
                  </>
                ))
            }
          </div>
          {
            info.textArea && (
              <div class="mb-4">
                <label for="notes" class="block mb-0 font-semibold"></label>
                <textarea
                  id="notes"
                  name="notes"
                  placeholder={info.textArea}
                  class="w-full h-20 p-2 border bg-gray-100 border-gray-400 rounded-sm focus:outline focus:outline-primary-600/50 focus:ring focus:ring-primary-600/50 focus:border-primary-600/50"
                />
              </div>
            )
          }
          {
            quiz.questions.map((question, index) => (
              <fieldset class="pt-2 pb-6 flex flex-col gap-y-2">
                <legend>
                  {index + 1}. {question.question}
                </legend>
                {question.options.map((answer, i) => (
                  <label>
                    <input type="radio" name={`q${index + 1}`} value={i + 1} />{" "}
                    {answer}
                  </label>
                ))}
              </fieldset>
            ))
          }
          <p class="hidden">
            <label>
              Don't fill this out if you're human:
              <input name="confirm-email" />
            </label>
          </p>
        </div>
        <div class="mt-8">
          <input
            type="checkbox"
            name="agree-data-collection"
            id="agree-data-collection"
            class="mr-2 size-6 lg:size-5"
          />

          <label
            for="agree-data-collection"
            class="text-gray-800 text-sm lg:text-base font-sans2"
            set:html={info.checkboxText}
          />
        </div>
        <input type="hidden" id="quizResult" name="quizResult" />
        <button
          id="submit-button"
          form="contact-form"
          disabled
          type="submit"
          class="mx-auto mt-8 btn-accent cursor-not-allowed bg-gray-400 hover:bg-gray-400 hover:text-white"
        >
          Get Results
        </button>
      </form>
      <!-- Loading spinner -->
      <div
        id="loading-spinner"
        class="hidden fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50"
      >
        <div class="text-center">
          <svg
            class="animate-spin h-10 w-10 text-white mx-auto"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8v8H4z"></path>
          </svg>
          <p class="mt-4 text-white text-lg">Calculating Results...</p>
        </div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ FORM_WEBHOOK_URL, quiz, PORTAL_API_KEY }}>
  document.addEventListener("DOMContentLoaded", () => {
    const checkbox = document.getElementById("agree-data-collection");
    const submitButton = document.getElementById("submit-button");
    const loadingSpinner = document.getElementById("loading-spinner");
    const contactForm = document.getElementById("contact-form");

    if (!contactForm) {
      console.error("Form element not found.");
      return;
    }

    // Enable/disable submit button based on checkbox
    checkbox?.addEventListener("change", () => {
      if (checkbox.checked) {
        submitButton.disabled = false;
        submitButton.classList.remove(
          "cursor-not-allowed",
          "bg-gray-400",
          "hover:bg-gray-400",
        );
      } else {
        submitButton.disabled = true;
        submitButton.classList.add(
          "cursor-not-allowed",
          "bg-gray-400",
          "hover:bg-gray-400",
        );
      }
    });

    contactForm.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(contactForm);
      const confirmEmail = formData.get("confirm-email")?.trim();
      if (confirmEmail) return; // Honeypot field filled: bot

      // Show loading spinner
      loadingSpinner?.classList.remove("hidden");

      // ---- QUIZ LOGIC ----
      const counts = { A: 0, B: 0, C: 0, D: 0 };
      const answerValues = { A: [], B: [], C: [], D: [] };

      for (const [key, value] of formData.entries()) {
        if (value == 1) counts.A++, answerValues.A.push(value);
        if (value == 2) counts.B++, answerValues.B.push(value);
        if (value == 3) counts.C++, answerValues.C.push(value);
        if (value == 4) counts.D++, answerValues.D.push(value);
      }

      const highestScore = Object.entries(counts).reduce(
        (highest, current) => (current[1] > highest[1] ? current : highest),
        ["", 0],
      );

      const personalityMap = {
        A: `You're Ready to Start Your Flight Training Journey!`,
        B: `You’d Love a Discovery Flight!`,
        C: `A Career as a Pilot Could Be Right for You!`,
        D: `You’re Interested but Need More Info!`,
      };

      const redirectPage =
        {
          A: `/quiz/ready-to-start`,
          B: `/quiz/discovery-flight`,
          C: `/quiz/career-as-a-pilot`,
          D: `/quiz/more-info`,
        }[highestScore[0]] || "/404";

      const quizResult = personalityMap[highestScore[0]];
      formData.set("quizResult", quizResult);

      // Append readable quiz answers
      quiz.questions.forEach((question, index) => {
        const answer = formData.get(`q${index + 1}`);
        if (answer) {
          formData.set(`q${index + 1}`, question.options[answer - 1]);
        }
      });

      // ---- Prepare data for both endpoints ----
      const urlEncodedBody = new URLSearchParams(formData).toString();

      const excludedFields = [
        "first-name",
        "last-name",
        "email",
        "phone",
        "confirm-email",
        "agree-data-collection",
      ];

      const metadata = {};
      for (const [key, value] of formData.entries()) {
        if (!excludedFields.includes(key)) {
          metadata[key] = value?.trim?.() ?? value;
        }
      }

      const jsonBody = {
        first_name: formData.get("first-name")?.trim() || "",
        last_name: formData.get("last-name")?.trim() || "",
        email: formData.get("email")?.trim() || "",
        phone: formData.get("phone")?.trim() || "",
        campaign: "quiz",
        account_random_id: "ac_fabson4e",
        metadata: metadata,
      };

      try {
        const [ghlRes, portalRes] = await Promise.all([
          fetch(FORM_WEBHOOK_URL, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: urlEncodedBody,
          }),
          fetch("https://portal.rightruddermarketing.com/api/leads", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              "x-api-key": PORTAL_API_KEY,
            },
            body: JSON.stringify(jsonBody),
          }),
        ]);

        setTimeout(() => {
          loadingSpinner?.classList.add("hidden");
          if (ghlRes.ok && portalRes.ok) {
            window.location.href = redirectPage;
          } else {
            console.error("Submission failed", {
              ghlStatus: ghlRes.status,
              portalStatus: portalRes.status,
            });
          }
        }, 1000);
      } catch (err) {
        loadingSpinner?.classList.add("hidden");
        console.error("Submission error:", err);
      }
    });
  });
</script>
